/**
 * Filas:
 * a) Implemente uma fila utilizando duas pilhas.
 * b) Escreva um programa para verificar se uma sequência de operações de enfileirar e desenfileirar em uma fila pode ser convertida em outra sequência utilizando apenas as operações de desenfileirar e enfileirar.
 * 
 * Pilhas:
 * a) Implemente uma pilha que mantenha o menor elemento em tempo constante.
 * b) Escreva um programa para verificar se uma sequência de parênteses (abertos e fechados) está balanceada utilizando uma pilha.
 * 
 * Listas:
 * a) Implemente uma lista encadeada reversa, ou seja, a ordem dos elementos deve ser invertida em relação à lista original.
 * b) Escreva uma função que verifique se uma lista está ordenada em ordem crescente.
 * 
 * Árvores Binárias:
 * a) Implemente um algoritmo para contar o número de folhas em uma árvore binária.
 * b) Escreva uma função para verificar se duas árvores binárias são idênticas.
 * 
 * Desafio:
 * a) Implemente uma estrutura de dados chamada "Deque" (Double-Ended Queue), que permite inserções e remoções em ambas as extremidades em tempo constante.
 * b) Implemente uma árvore de busca binária balanceada (AVL Tree) e escreva funções para inserir e remover elementos.
 * 
 */
package lista_de_exercicio_2;

public class Exercicios {

}
